[
  {
    "title": "1.1.1 Design the core SQLite schema for emails and metadata",
    "body": "Create the database schema design for efficiently storing emails and their associated metadata. Focus on optimizing for query performance and storage efficiency. Consider indexing strategies for common access patterns.",
    "assignees": ["EstebanMarquez"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "design", "task"]
  },
  {
    "title": "1.1.2 Build C++ bindings for DB (pybind11)",
    "body": "Implement C++ bindings using pybind11 to provide Python access to the SQLite database. Ensure thread safety and proper error handling between C++ and Python layers.",
    "assignees": ["NoamFavier"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "c++", "python-binding", "task"]
  },
  {
    "title": "1.1.3 Implement DB schema in code and validate it",
    "body": "Convert the database schema design into code, implement it, and create validation tests to ensure integrity. This task is connected to milestone M1.",
    "assignees": ["EstebanMarquez"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "implementation", "validation", "task"]
  },
  {
    "title": "1.1.4 Stress test DB with large email volume",
    "body": "Perform stress testing on the database implementation using large volumes of email data. Identify and resolve performance bottlenecks.",
    "assignees": ["EstebanMarquez"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "testing", "performance", "task"]
  },
  {
    "title": "1.2.1 Preprocess Enron dataset for NLP tasks",
    "body": "Process the Enron email dataset to prepare it for NLP tasks. This includes cleaning, normalization, and extraction of relevant features.",
    "assignees": ["JiangWei"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["data-processing", "nlp", "task"]
  },
  {
    "title": "1.2.2 Add multithreaded loading for >10k emails",
    "body": "Implement multithreaded loading to efficiently process large email datasets (>10,000 emails). Focus on parallelization and thread safety.",
    "assignees": ["JiangWei"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["performance", "multithreading", "task"]
  },
  {
    "title": "1.2.3 CLI/GUI dataset import interface",
    "body": "Create both command-line and graphical user interfaces for importing email datasets. Include validation and error handling for different formats.",
    "assignees": ["NoamFavier"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["ui", "cli", "data-import", "task"]
  },
  {
    "title": "1.2.4 Implement anonymization filter for personal data",
    "body": "Develop a filter to anonymize personally identifiable information (PII) in the email datasets. This task is connected to milestone M2.",
    "assignees": ["JiangWei"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["privacy", "security", "data-processing", "task"]
  },
  {
    "title": "1.2.5 Extend support for Kaggle/UCI datasets",
    "body": "Add support for importing and processing email datasets from Kaggle and UCI repositories, ensuring compatibility with the system.",
    "assignees": ["EstebanMarquez"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["data-import", "compatibility", "task"]
  },
  {
    "title": "2.1.1 Migrate baseline to RoBERTa/BERT",
    "body": "Update the existing classification baseline to use RoBERTa or BERT models from HuggingFace. Compare performance with the previous approach.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "2.1 Email Category Classification System",
    "labels": ["nlp", "machine-learning", "bert", "task"]
  },
  {
    "title": "2.1.2 Benchmark vs hybrid model (accuracy/speed)",
    "body": "Perform comprehensive benchmarking comparing the transformer models with hybrid approaches, evaluating both accuracy and processing speed.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "2.1 Email Category Classification System",
    "labels": ["benchmarking", "performance", "evaluation", "task"]
  },
  {
    "title": "2.1.3 Add confidence thresholds via config",
    "body": "Implement configurable confidence thresholds for the classification system to allow tuning of precision/recall tradeoffs.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "2.1 Email Category Classification System",
    "labels": ["machine-learning", "configuration", "task"]
  },
  {
    "title": "2.1.4 Serialize model predictions into DB",
    "body": "Implement functionality to store and retrieve model predictions in the database. This task is connected to milestone M3.",
    "assignees": ["JiangWei"],
    "milestone": "2.1 Email Category Classification System",
    "labels": ["database", "machine-learning", "serialization", "task"]
  },
  {
    "title": "2.2.1 Integrate HuggingFace NER pipeline",
    "body": "Integrate the HuggingFace Named Entity Recognition pipeline into the system for identifying entities in emails.",
    "assignees": ["RemiDubois"],
    "milestone": "2.2 Named Entity Recognition Integration",
    "labels": ["nlp", "ner", "integration", "task"]
  },
  {
    "title": "2.2.2 Tagging output mapping and entity types",
    "body": "Define the mapping between NER outputs and entity types relevant to the email domain, creating a consistent taxonomy.",
    "assignees": ["EstebanMarquez"],
    "milestone": "2.2 Named Entity Recognition Integration",
    "labels": ["nlp", "ner", "taxonomy", "task"]
  },
  {
    "title": "2.2.3 Visualize NER tags in GUI",
    "body": "Implement visualization of named entity tags in the graphical user interface, with appropriate highlighting and information display.",
    "assignees": ["OctavianIonescu"],
    "milestone": "2.2 Named Entity Recognition Integration",
    "labels": ["ui", "visualization", "ner", "task"]
  },
  {
    "title": "2.2.4 Store and index entities in DB",
    "body": "Extend the database schema to store and index recognized entities for efficient retrieval. This task is connected to milestone M5.",
    "assignees": ["JiangWei"],
    "milestone": "2.2 Named Entity Recognition Integration",
    "labels": ["database", "indexing", "ner", "task"]
  },
  {
    "title": "2.3.1 Replace TextBlob with VADER/FinBERT",
    "body": "Migrate from TextBlob to either VADER or FinBERT for improved sentiment analysis on email content.",
    "assignees": ["RemiDubois"],
    "milestone": "2.3 Emotion & Tone Detection",
    "labels": ["nlp", "sentiment-analysis", "migration", "task"]
  },
  {
    "title": "2.3.2 Add tone classification (casual, formal, sarcasm)",
    "body": "Implement classification of email tone to identify casual, formal, or sarcastic communication styles.",
    "assignees": ["RemiDubois"],
    "milestone": "2.3 Emotion & Tone Detection",
    "labels": ["nlp", "tone-detection", "classification", "task"]
  },
  {
    "title": "2.3.3 Integrate tone into reply and GUI",
    "body": "Connect the tone detection system with the reply generator and GUI to enable tone-aware interactions.",
    "assignees": ["OctavianIonescu"],
    "milestone": "2.3 Emotion & Tone Detection",
    "labels": ["ui", "integration", "tone-detection", "task"]
  },
  {
    "title": "3.1.1 Build logic to choose best summarization method",
    "body": "Develop logic to select the optimal summarization method based on email characteristics such as length and complexity.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "summarization", "algorithm", "task"]
  },
  {
    "title": "3.1.2 Implement extractive summarization (TextRank or BERTSum)",
    "body": "Implement extractive summarization using either TextRank or BERTSum algorithms, optimized for email content.",
    "assignees": ["NoamFavier"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "summarization", "implementation", "task"]
  },
  {
    "title": "3.1.3 Integrate summarization into pipeline output",
    "body": "Connect the summarization engine with the overall NLP pipeline, ensuring smooth data flow. This task is connected to milestone M2.",
    "assignees": ["NoamFavier"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "integration", "pipeline", "task"]
  },
  {
    "title": "3.1.4 Add summary method selector (based on email length)",
    "body": "Implement a selector that chooses the appropriate summarization method based on email length and other characteristics. This task is connected to milestone M3.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "summarization", "selection", "task"]
  },
  {
    "title": "3.2.1 Add urgency/tone awareness to reply logic",
    "body": "Enhance the reply generation system to consider urgency and tone when creating responses.",
    "assignees": ["RemiDubois"],
    "milestone": "3.2 Smart Reply Generator",
    "labels": ["nlp", "reply-generation", "context-awareness", "task"]
  },
  {
    "title": "3.2.2 Implement thread-based context memory",
    "body": "Create a system to maintain and utilize conversation context across email threads for more relevant replies.",
    "assignees": ["RemiDubois"],
    "milestone": "3.2 Smart Reply Generator",
    "labels": ["nlp", "context-awareness", "memory", "task"]
  },
  {
    "title": "3.2.3 Fine-tune small LLM for reply suggestions",
    "body": "Train and fine-tune a small language model specifically for generating contextually appropriate email replies.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "3.2 Smart Reply Generator",
    "labels": ["nlp", "machine-learning", "fine-tuning", "task"]
  },
  {
    "title": "3.2.4 Connect smart reply to GUI approve/edit UI",
    "body": "Integrate the smart reply system with the GUI, allowing users to approve or edit suggested responses. This task is connected to milestone M5.",
    "assignees": ["OctavianIonescu"],
    "milestone": "3.2 Smart Reply Generator",
    "labels": ["ui", "integration", "reply-generation", "task"]
  },
  {
    "title": "4.1.1 Modularize main flow (Loader --> Classifier --> Summary)",
    "body": "Refactor the main processing flow into modular components with well-defined interfaces between loader, classifier, and summarization stages.",
    "assignees": ["OctavianIonescu"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["architecture", "refactoring", "modularity", "task"]
  },
  {
    "title": "4.1.2 Add config system for thresholds",
    "body": "Implement a configuration system for setting and adjusting various thresholds throughout the application.",
    "assignees": ["NoamFavier"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["configuration", "implementation", "task"]
  },
  {
    "title": "4.1.3 Add async processing queue (multiprocessing/Celery)",
    "body": "Implement an asynchronous processing queue using either multiprocessing or Celery to handle background tasks efficiently. This task is connected to milestone M4.",
    "assignees": ["NoamFavier"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["async", "queue", "performance", "task"]
  },
  {
    "title": "4.2.1 Add endpoints for predictions and metadata search",
    "body": "Create REST API endpoints for accessing model predictions and searching email metadata. This task is connected to milestone M4.",
    "assignees": ["JiangWei"],
    "milestone": "4.2 REST API for Predictions",
    "labels": ["api", "endpoints", "implementation", "task"]
  },
  {
    "title": "4.2.2 Create backend API (Flask or FastAPI)",
    "body": "Implement the backend API using either Flask or FastAPI, with appropriate routing and request handling. This task is connected to milestone M5.",
    "assignees": ["JiangWei"],
    "milestone": "4.2 REST API for Predictions",
    "labels": ["api", "backend", "implementation", "task"]
  },
  {
    "title": "4.2.3 Add endpoints for metadata search",
    "body": "Implement specialized API endpoints for advanced metadata searching and filtering. This task is connected to milestone M5.",
    "assignees": ["EstebanMarquez"],
    "milestone": "4.2 REST API for Predictions",
    "labels": ["api", "search", "metadata", "task"]
  },
  {
    "title": "5.1.1 Design inbox layout and mock UI",
    "body": "Create detailed design mockups for the inbox layout and overall user interface.",
    "assignees": ["OctavianIonescu"],
    "milestone": "5.1 Interface Design & Tagging",
    "labels": ["ui-design", "mockup", "inbox", "task"]
  },
  {
    "title": "5.1.2 Design tags for urgency, tone, and category",
    "body": "Design the visual representation of tags for indicating email urgency, tone, and category in the UI.",
    "assignees": ["OctavianIonescu"],
    "milestone": "5.1 Interface Design & Tagging",
    "labels": ["ui-design", "tags", "visualization", "task"]
  },
  {
    "title": "5.1.3 Implement Qt layout with dummy data",
    "body": "Create the Qt implementation of the interface layout using placeholder data for visualization. This task is connected to milestone M5.",
    "assignees": ["NoamFavier"],
    "milestone": "5.1 Interface Design & Tagging",
    "labels": ["ui", "qt", "implementation", "task"]
  },
  {
    "title": "5.2.1 Display email + model outputs in GUI",
    "body": "Implement the UI components to display both email content and the associated model outputs (classification, entities, etc.).",
    "assignees": ["NoamFavier"],
    "milestone": "5.2 GUI Logic & Integration",
    "labels": ["ui", "visualization", "integration", "task"]
  },
  {
    "title": "5.2.2 Connect GUI with backend predictions",
    "body": "Integrate the GUI with the backend prediction system to display real-time model outputs. This task is connected to milestone M5.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "5.2 GUI Logic & Integration",
    "labels": ["ui", "integration", "backend", "task"]
  },
  {
    "title": "5.3.1 Add smart reply approve/edit dropdown",
    "body": "Implement the UI component for approving or editing smart reply suggestions.",
    "assignees": ["OctavianIonescu"],
    "milestone": "5.3 Smart User Interactions",
    "labels": ["ui", "smart-reply", "interaction", "task"]
  },
  {
    "title": "5.3.2 Build inbox analytics view",
    "body": "Create a dashboard view for displaying email analytics and insights.",
    "assignees": ["EstebanMarquez"],
    "milestone": "5.3 Smart User Interactions",
    "labels": ["ui", "analytics", "visualization", "task"]
  },
  {
    "title": "5.3.3 Add filters and search bar",
    "body": "Implement advanced filtering and search functionality in the user interface. This task is connected to milestone M5.",
    "assignees": ["RemiDubois"],
    "milestone": "5.3 Smart User Interactions",
    "labels": ["ui", "search", "filtering", "task"]
  }
]