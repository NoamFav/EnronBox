[
  {
    "title": "Research pybind11 integration best practices for SQLite",
    "body": "Research and document the best practices for integrating SQLite with Python using pybind11. Consider performance implications and memory management approaches.",
    "assignees": ["NoamFavier"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "c++", "python-binding"]
  },
  {
    "title": "Set up environment for pybind11 development",
    "body": "Configure the development environment for pybind11, including necessary libraries, build tools, and test framework.",
    "assignees": ["NoamFavier"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "c++", "setup"]
  },
  {
    "title": "Create wrapper class for SQLite database operations",
    "body": "Implement a C++ wrapper class that encapsulates SQLite operations and provides a clean interface for Python bindings.",
    "assignees": ["NoamFavier"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "c++", "python-binding"]
  },
  {
    "title": "Implement basic CRUD operations via pybind11",
    "body": "Create Python bindings for Create, Read, Update, and Delete operations on the email database using pybind11.",
    "assignees": ["NoamFavier"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "c++", "python-binding"]
  },
  {
    "title": "Add transaction support and error handling",
    "body": "Implement transaction support in the database wrapper and ensure proper error handling is propagated between C++ and Python.",
    "assignees": ["NoamFavier"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "c++", "error-handling"]
  },
  {
    "title": "Write unit tests for C++ bindings",
    "body": "Create comprehensive unit tests for the pybind11 database bindings to ensure reliability and correctness.",
    "assignees": ["NoamFavier"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "c++", "testing"]
  },
  {
    "title": "Optimize binding performance for large datasets",
    "body": "Profile and optimize the pybind11 bindings to ensure efficient handling of large email datasets (>10k emails).",
    "assignees": ["NoamFavier"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "c++", "optimization"]
  },
  {
    "title": "Design CLI command structure for dataset imports",
    "body": "Design a clear and intuitive command-line interface structure for importing different email dataset formats.",
    "assignees": ["NoamFavier"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["cli", "ux", "data-import"]
  },
  {
    "title": "Implement file format validation",
    "body": "Create validation mechanisms to ensure imported files match expected formats and report clear error messages.",
    "assignees": ["NoamFavier"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["data-validation", "error-handling"]
  },
  {
    "title": "Create progress reporting for long imports",
    "body": "Implement a progress reporting system for long-running import operations to provide feedback to users.",
    "assignees": ["NoamFavier"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["ux", "data-import"]
  },
  {
    "title": "Design GUI import dialog interface",
    "body": "Create mockups and design specifications for the graphical import dialog interface that will be implemented in Qt.",
    "assignees": ["NoamFavier"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["ui-design", "qt", "data-import"]
  },
  {
    "title": "Implement Qt-based import wizard",
    "body": "Build an intuitive step-by-step import wizard using Qt for the desktop application.",
    "assignees": ["NoamFavier"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["ui", "qt", "data-import"]
  },
  {
    "title": "Add error handling and validation feedback",
    "body": "Enhance the import interface with clear error messages and validation feedback to guide users through the import process.",
    "assignees": ["NoamFavier"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["ui", "error-handling", "ux"]
  },
  {
    "title": "Research and compare TextRank vs BERTSum implementations",
    "body": "Research both extractive summarization algorithms, considering their performance characteristics on email data and implementation complexity.",
    "assignees": ["NoamFavier"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "research", "summarization"]
  },
  {
    "title": "Implement text preprocessing for summarization",
    "body": "Create preprocessing pipelines specific to email text to improve summarization quality.",
    "assignees": ["NoamFavier"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "preprocessing", "summarization"]
  },
  {
    "title": "Integrate selected algorithm with Python bindings",
    "body": "Connect the selected summarization algorithm with the Python/C++ bindings to ensure it's accessible throughout the application.",
    "assignees": ["NoamFavier"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "python-binding", "summarization"]
  },
  {
    "title": "Optimize for speed with longer documents",
    "body": "Profile and optimize the summarization algorithm to maintain performance with lengthy email threads.",
    "assignees": ["NoamFavier"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "optimization", "summarization"]
  },
  {
    "title": "Test summarization quality on Enron dataset",
    "body": "Evaluate the summarization quality on the Enron email dataset, focusing on preserving key information.",
    "assignees": ["NoamFavier"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "testing", "summarization"]
  },
  {
    "title": "Design summarization output format",
    "body": "Define the structure and format for summarization output that will be used throughout the pipeline.",
    "assignees": ["NoamFavier"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "design", "summarization"]
  },
  {
    "title": "Add configuration options for summary length",
    "body": "Implement configurable summary length controls that adapt to different email types and user preferences.",
    "assignees": ["NoamFavier"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "configuration", "summarization"]
  },
  {
    "title": "Implement pipeline connector for summarization module",
    "body": "Create the necessary integration points to connect the summarization engine with the rest of the NLP pipeline.",
    "assignees": ["NoamFavier"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "integration", "summarization"]
  },
  {
    "title": "Create summarization caching layer",
    "body": "Implement a caching system to avoid redundant summarization of unchanged emails.",
    "assignees": ["NoamFavier"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "optimization", "caching"]
  },
  {
    "title": "Add serialization of summaries to database",
    "body": "Implement database storage for email summaries to enable quick retrieval and reuse.",
    "assignees": ["NoamFavier"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["database", "nlp", "summarization"]
  },
  {
    "title": "Write integration tests for summarization pipeline",
    "body": "Create comprehensive tests to verify the integration of the summarization engine with the rest of the system.",
    "assignees": ["NoamFavier"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["testing", "integration", "summarization"]
  },
  {
    "title": "Design configuration file format (YAML/JSON)",
    "body": "Define the structure and format for the configuration files that will control system thresholds and behaviors.",
    "assignees": ["NoamFavier"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["configuration", "design"]
  },
  {
    "title": "Implement configuration parsing and validation",
    "body": "Create robust configuration parsing logic with validation to prevent invalid configurations.",
    "assignees": ["NoamFavier"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["configuration", "validation"]
  },
  {
    "title": "Create default configurations for all modules",
    "body": "Define sensible default configurations for each module in the system to enable out-of-the-box functionality.",
    "assignees": ["NoamFavier"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["configuration"]
  },
  {
    "title": "Add runtime configuration update capability",
    "body": "Implement the ability to update configuration settings at runtime without requiring a restart.",
    "assignees": ["NoamFavier"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["configuration", "runtime"]
  },
  {
    "title": "Implement configuration UI in settings panel",
    "body": "Create a user interface for viewing and modifying configuration settings within the application.",
    "assignees": ["NoamFavier"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["ui", "configuration", "settings"]
  },
  {
    "title": "Test configuration changes across pipeline",
    "body": "Verify that configuration changes properly propagate through all components of the pipeline.",
    "assignees": ["NoamFavier"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["testing", "configuration", "integration"]
  },
  {
    "title": "Research best approach (multiprocessing vs Celery)",
    "body": "Compare multiprocessing and Celery approaches for the async processing queue, considering factors like complexity, scalability, and deployment requirements.",
    "assignees": ["NoamFavier"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["research", "async", "architecture"]
  },
  {
    "title": "Design queue architecture and task structure",
    "body": "Create a detailed design for the async processing queue architecture and task definition structure.",
    "assignees": ["NoamFavier"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["design", "async", "architecture"]
  },
  {
    "title": "Implement worker pool and task distribution",
    "body": "Build the worker pool system that will process async tasks and handle distribution of workload.",
    "assignees": ["NoamFavier"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["async", "implementation"]
  },
  {
    "title": "Add progress monitoring and reporting",
    "body": "Implement mechanisms to track and report progress of async tasks back to the user interface.",
    "assignees": ["NoamFavier"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["async", "ux", "monitoring"]
  },
  {
    "title": "Implement failure handling and retries",
    "body": "Create robust error handling for async tasks, including automated retry logic for recoverable failures.",
    "assignees": ["NoamFavier"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["async", "error-handling"]
  },
  {
    "title": "Test performance with large email batches",
    "body": "Benchmark the async processing system with large batches of emails to ensure it scales properly.",
    "assignees": ["NoamFavier"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["testing", "performance", "async"]
  },
  {
    "title": "Set up Qt development environment",
    "body": "Configure the Qt development environment for the desktop GUI implementation.",
    "assignees": ["NoamFavier"],
    "milestone": "5.1 Interface Design & Tagging",
    "labels": ["setup", "qt", "ui"]
  },
  {
    "title": "Create main application window and layouts",
    "body": "Implement the main application window and top-level layouts based on the approved design.",
    "assignees": ["NoamFavier"],
    "milestone": "5.1 Interface Design & Tagging",
    "labels": ["ui", "qt", "implementation"]
  },
  {
    "title": "Implement inbox view with dummy emails",
    "body": "Create the inbox view component with mock email data to visualize the layout.",
    "assignees": ["NoamFavier"],
    "milestone": "5.1 Interface Design & Tagging",
    "labels": ["ui", "qt", "implementation"]
  },
  {
    "title": "Add email detail view components",
    "body": "Implement the components for displaying detailed email content and metadata.",
    "assignees": ["NoamFavier"],
    "milestone": "5.1 Interface Design & Tagging",
    "labels": ["ui", "qt", "implementation"]
  },
  {
    "title": "Create placeholder visualization widgets",
    "body": "Build placeholder widgets for email analytics and classification visualizations.",
    "assignees": ["NoamFavier"],
    "milestone": "5.1 Interface Design & Tagging",
    "labels": ["ui", "qt", "visualization"]
  },
  {
    "title": "Implement dark/light theme support",
    "body": "Add theme switching capability to the UI with both dark and light mode support.",
    "assignees": ["NoamFavier"],
    "milestone": "5.1 Interface Design & Tagging",
    "labels": ["ui", "qt", "theming"]
  },
  {
    "title": "Add responsive layout adjustments",
    "body": "Ensure the UI adapts appropriately to different window sizes and screen resolutions.",
    "assignees": ["NoamFavier"],
    "milestone": "5.1 Interface Design & Tagging",
    "labels": ["ui", "qt", "responsive-design"]
  },
  {
    "title": "Design email detail view layout",
    "body": "Create the detailed design for the email view that will display message content and model outputs.",
    "assignees": ["NoamFavier"],
    "milestone": "5.2 GUI Logic & Integration",
    "labels": ["ui-design", "qt"]
  },
  {
    "title": "Create component for displaying email content with HTML support",
    "body": "Implement a Qt component that can render email content with proper HTML formatting support.",
    "assignees": ["NoamFavier"],
    "milestone": "5.2 GUI Logic & Integration",
    "labels": ["ui", "qt", "html-rendering"]
  },
  {
    "title": "Implement visualization of classification results",
    "body": "Create visual indicators for email classification results within the UI.",
    "assignees": ["NoamFavier"],
    "milestone": "5.2 GUI Logic & Integration",
    "labels": ["ui", "visualization", "classification"]
  },
  {
    "title": "Add NER tag highlighting in email content",
    "body": "Implement highlighting of named entities within the email content view.",
    "assignees": ["NoamFavier"],
    "milestone": "5.2 GUI Logic & Integration",
    "labels": ["ui", "ner", "visualization"]
  },
  {
    "title": "Create emotion/tone display component",
    "body": "Build a component to visually represent the emotional tone analysis of emails.",
    "assignees": ["NoamFavier"],
    "milestone": "5.2 GUI Logic & Integration",
    "labels": ["ui", "sentiment-analysis", "visualization"]
  },
  {
    "title": "Research efficient schema designs for email storage",
    "body": "Research and document optimal database schema designs for efficient email storage and retrieval.",
    "assignees": ["EstebanMarquez"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["research", "database", "design"]
  },
  {
    "title": "Create entity-relationship diagrams for the database",
    "body": "Create comprehensive ER diagrams for the email database schema.",
    "assignees": ["EstebanMarquez"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "design", "documentation"]
  },
  {
    "title": "Document schema design decisions and constraints",
    "body": "Create detailed documentation explaining the schema design decisions, constraints, and performance considerations.",
    "assignees": ["EstebanMarquez"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "documentation"]
  },
  {
    "title": "Convert schema design to SQLite DDL statements",
    "body": "Transform the database design into SQLite Data Definition Language (DDL) statements.",
    "assignees": ["EstebanMarquez"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "sql", "implementation"]
  },
  {
    "title": "Implement schema migration system",
    "body": "Create a system to handle schema migrations for future database updates.",
    "assignees": ["EstebanMarquez"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "migration"]
  },
  {
    "title": "Create validation tests for schema integrity",
    "body": "Develop tests to verify the integrity and correctness of the database schema implementation.",
    "assignees": ["EstebanMarquez"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "testing"]
  },
  {
    "title": "Generate synthetic email dataset for testing",
    "body": "Create a synthetic dataset of emails for stress testing the database implementation.",
    "assignees": ["EstebanMarquez"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "testing", "data-generation"]
  },
  {
    "title": "Develop benchmarking framework for DB operations",
    "body": "Create a framework to measure and compare database operation performance.",
    "assignees": ["EstebanMarquez"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "benchmarking", "performance"]
  },
  {
    "title": "Optimize indexing for common query patterns",
    "body": "Analyze common query patterns and optimize database indexes accordingly.",
    "assignees": ["EstebanMarquez"],
    "milestone": "1.1 Finalize and Implement the Email Database",
    "labels": ["database", "optimization", "indexing"]
  },
  {
    "title": "Research common email dataset formats",
    "body": "Research various email dataset formats available on Kaggle and UCI repositories.",
    "assignees": ["EstebanMarquez"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["research", "data-import"]
  },
  {
    "title": "Clean and normalize Enron dataset text",
    "body": "Process the Enron email dataset to clean and normalize text for NLP tasks.",
    "assignees": ["JiangWei"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["data-preprocessing", "nlp"]
  },
  {
    "title": "Extract metadata from email headers",
    "body": "Implement extraction of useful metadata from email headers in the Enron dataset.",
    "assignees": ["JiangWei"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["data-preprocessing", "metadata-extraction"]
  },
  {
    "title": "Create training/testing splits for ML models",
    "body": "Develop a consistent approach for creating training/testing splits for the machine learning models.",
    "assignees": ["JiangWei"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["machine-learning", "data-preparation"]
  },
  {
    "title": "Design thread pooling strategy for data loading",
    "body": "Create a design for efficient thread pooling to handle parallel loading of email data.",
    "assignees": ["JiangWei"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["concurrency", "design", "optimization"]
  },
  {
    "title": "Implement thread-safe database operations",
    "body": "Ensure database operations are thread-safe for concurrent access during bulk loading.",
    "assignees": ["JiangWei"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["database", "concurrency", "thread-safety"]
  },
  {
    "title": "Add progress reporting for bulk operations",
    "body": "Implement a progress reporting mechanism for tracking bulk data operations.",
    "assignees": ["JiangWei"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["ux", "monitoring"]
  },
  {
    "title": "Research and select PII detection algorithms",
    "body": "Evaluate different algorithms for detecting personally identifiable information (PII) in email content.",
    "assignees": ["JiangWei"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["research", "privacy", "pii-detection"]
  },
  {
    "title": "Implement name and email address anonymization",
    "body": "Create anonymization functionality for names and email addresses in the dataset.",
    "assignees": ["JiangWei"],
    "milestone": "1.2 Dataset Processing System",
    "labels": ["privacy", "anonymization", "implementation"]
  },
  {
    "title": "Design database schema for classification results",
    "body": "Create the database schema extensions needed to store model classification results.",
    "assignees": ["JiangWei"],
    "milestone": "2.1 Email Category Classification System",
    "labels": ["database", "design", "classification"]
  },
  {
    "title": "Set up HuggingFace transformers environment",
    "body": "Configure the environment for using HuggingFace transformer models (BERT/RoBERTa).",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "2.1 Email Category Classification System",
    "labels": ["machine-learning", "setup", "huggingface"]
  },
  {
    "title": "Implement BERT-based classification pipeline",
    "body": "Create the classification pipeline using BERT or RoBERTa models from HuggingFace.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "2.1 Email Category Classification System",
    "labels": ["machine-learning", "implementation", "bert"]
  },
  {
    "title": "Compare performance with existing baseline",
    "body": "Benchmark the new transformer-based models against the existing classification baseline.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "2.1 Email Category Classification System",
    "labels": ["machine-learning", "benchmarking"]
  },
  {
    "title": "Design hybrid model architecture",
    "body": "Design a hybrid classification model that combines speed and accuracy benefits.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "2.1 Email Category Classification System",
    "labels": ["machine-learning", "design", "architecture"]
  },
  {
    "title": "Implement benchmarking framework",
    "body": "Create a framework for consistently benchmarking model performance on speed and accuracy.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "2.1 Email Category Classification System",
    "labels": ["machine-learning", "benchmarking", "testing"]
  },
  {
    "title": "Document performance tradeoffs",
    "body": "Create detailed documentation about the performance tradeoffs between different model architectures.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "2.1 Email Category Classification System",
    "labels": ["machine-learning", "documentation"]
  },
  {
    "title": "Configure NER model for email-specific entities",
    "body": "Configure and potentially fine-tune the HuggingFace NER model for email-specific entity recognition.",
    "assignees": ["RemiDubois"],
    "milestone": "2.2 Named Entity Recognition Integration",
    "labels": ["nlp", "ner", "model-configuration"]
  },
  {
    "title": "Implement entity extraction pipeline",
    "body": "Create the pipeline for extracting named entities from email content.",
    "assignees": ["RemiDubois"],
    "milestone": "2.2 Named Entity Recognition Integration",
    "labels": ["nlp", "ner", "implementation"]
  },
  {
    "title": "Optimize for performance in email context",
    "body": "Optimize the NER pipeline specifically for email text context and formatting.",
    "assignees": ["RemiDubois"],
    "milestone": "2.2 Named Entity Recognition Integration",
    "labels": ["nlp", "ner", "optimization"]
  },
  {
    "title": "Evaluate VADER and FinBERT performance on email data",
    "body": "Benchmark both VADER and FinBERT sentiment analysis models on email data to determine the best approach.",
    "assignees": ["RemiDubois"],
    "milestone": "2.3 Emotion & Tone Detection",
    "labels": ["nlp", "sentiment-analysis", "benchmarking"]
  },
  {
    "title": "Implement selected sentiment analysis model",
    "body": "Integrate the chosen sentiment analysis model (VADER or FinBERT) into the pipeline.",
    "assignees": ["RemiDubois"],
    "milestone": "2.3 Emotion & Tone Detection",
    "labels": ["nlp", "sentiment-analysis", "implementation"]
  },
  {
    "title": "Create compatibility layer with existing pipeline",
    "body": "Ensure the new sentiment analysis component integrates smoothly with the existing NLP pipeline.",
    "assignees": ["RemiDubois"],
    "milestone": "2.3 Emotion & Tone Detection",
    "labels": ["nlp", "sentiment-analysis", "integration"]
  },
  {
    "title": "Research tone classification techniques",
    "body": "Research state-of-the-art approaches for classifying text tone (casual, formal, sarcastic) in emails.",
    "assignees": ["RemiDubois"],
    "milestone": "2.3 Emotion & Tone Detection",
    "labels": ["nlp", "tone-detection", "research"]
  },
  {
    "title": "Create training data for email tone classification",
    "body": "Create or adapt a dataset specifically for training the email tone classification model.",
    "assignees": ["RemiDubois"],
    "milestone": "2.3 Emotion & Tone Detection",
    "labels": ["nlp", "tone-detection", "data-preparation"]
  },
  {
    "title": "Implement and evaluate tone classifier",
    "body": "Build and evaluate the tone classification model for detecting casual, formal, and sarcastic email tones.",
    "assignees": ["RemiDubois"],
    "milestone": "2.3 Emotion & Tone Detection",
    "labels": ["nlp", "tone-detection", "implementation"]
  },
  {
    "title": "Research email-specific summarization techniques",
    "body": "Research summarization approaches that work particularly well for email content and threads.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "summarization", "research"]
  },
  {
    "title": "Implement selection logic based on email properties",
    "body": "Create logic to select the appropriate summarization method based on email properties like length and structure.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "summarization", "implementation"]
  },
  {
    "title": "Create evaluation framework for summarization quality",
    "body": "Build a framework for evaluating and comparing the quality of different summarization approaches on email data.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "summarization", "evaluation"]
  },
  {
    "title": "Define threshold criteria for summary method selection",
    "body": "Determine the specific criteria and thresholds for choosing between summarization methods.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "summarization", "algorithm"]
  },
  {
    "title": "Implement fallback mechanisms for summarization",
    "body": "Create fallback mechanisms when the primary summarization method fails or produces poor results.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "summarization", "error-handling"]
  },
  {
    "title": "Evaluate performance across different email lengths",
    "body": "Test summarization performance on emails of varying lengths to ensure consistent quality.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "3.1 Summarization Engine",
    "labels": ["nlp", "summarization", "testing"]
  },
  {
    "title": "Develop urgency detection algorithm",
    "body": "Create an algorithm to detect urgent emails based on content, subject, and other metadata.",
    "assignees": ["RemiDubois"],
    "milestone": "3.2 Smart Reply Generator",
    "labels": ["nlp", "urgency-detection", "algorithm"]
  },
  {
    "title": "Implement tone-aware reply templates",
    "body": "Create a system of reply templates that adapt to the detected tone of the original email.",
    "assignees": ["RemiDubois"],
    "milestone": "3.2 Smart Reply Generator",
    "labels": ["nlp", "reply-generation", "implementation"]
  },
  {
    "title": "Design conversation thread data structure",
    "body": "Design the data structure for storing and retrieving email conversation threads for context-aware replies.",
    "assignees": ["RemiDubois"],
    "milestone": "3.2 Smart Reply Generator",
    "labels": ["design", "data-structure", "context-memory"]
  },
  {
    "title": "Research suitable small LLMs for email replies",
    "body": "Research and evaluate small language models that would be appropriate for generating email reply suggestions.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "3.2 Smart Reply Generator",
    "labels": ["nlp", "llm", "research"]
  },
  {
    "title": "Create fine-tuning dataset from email corpora",
    "body": "Prepare a dataset suitable for fine-tuning an LLM for email reply generation.",
    "assignees": ["GiorgosPapadopoulos"],
    "milestone": "3.2 Smart Reply Generator",
    "labels": ["nlp", "llm", "data-preparation"]
  },
  {
    "title": "Design pipeline architecture with clear interfaces",
    "body": "Create a modular pipeline architecture with well-defined interfaces between components.",
    "assignees": ["OctavianIonescu"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["architecture", "design", "interfaces"]
  },
  {
    "title": "Implement plugin system for pipeline components",
    "body": "Build a plugin system that allows pipeline components to be easily added, removed, or replaced.",
    "assignees": ["OctavianIonescu"],
    "milestone": "4.1 Modular Pipeline & Logic System",
    "labels": ["architecture", "implementation", "plugin-system"]
  },
  {
    "title": "Design REST API specification",
    "body": "Create a comprehensive REST API specification for the prediction and metadata endpoints.",
    "assignees": ["JiangWei"],
    "milestone": "4.2 REST API for Predictions",
    "labels": ["api", "design", "documentation"]
  },
  {
    "title": "Implement prediction request/response format",
    "body": "Define and implement the data format for prediction requests and responses.",
    "assignees": ["JiangWei"],
    "milestone": "4.2 REST API for Predictions",
    "labels": ["api", "implementation", "data-format"]
  },
  {
    "title": "Add authentication and rate limiting",
    "body": "Implement authentication and rate limiting for the REST API to prevent abuse.",
    "assignees": ["JiangWei"],
    "milestone": "4.2 REST API for Predictions",
    "labels": ["api", "security", "rate-limiting"]
  },
  {
    "title": "Design search query format and capabilities",
    "body": "Design the query format and capabilities for the metadata search API.",
    "assignees": ["EstebanMarquez"],
    "milestone": "4.2 REST API for Predictions",
    "labels": ["api", "search", "design"]
  },
  {
    "title": "Create wireframes for main application screens",
    "body": "Create detailed wireframes for the main application screens and workflows.",
    "assignees": ["OctavianIonescu"],
    "milestone": "5.1 Interface Design & Tagging",
    "labels": ["ui-design", "wireframing", "ux"]
  },
  {
    "title": "Define application style guide and theme",
    "body": "Create a comprehensive style guide and theme specification for the application.",
    "assignees": ["OctavianIonescu"],
    "milestone": "5.1 Interface Design & Tagging",
    "labels": ["ui-design", "style-guide", "theming"]
  },
  {
    "title": "Design tag color scheme and iconography",
    "body": "Design a consistent color scheme and set of icons for the tagging system.",
    "assignees": ["OctavianIonescu"],
    "milestone": "5.1 Interface Design & Tagging",
    "labels": ["ui-design", "icons", "color-scheme"]
  },
  {
    "title": "Design inline reply suggestion UI",
    "body": "Design the user interface for presenting inline reply suggestions to users.",
    "assignees": ["OctavianIonescu"],
    "milestone": "5.3 Smart User Interactions",
    "labels": ["ui-design", "ux", "reply-suggestions"]
  },
  {
    "title": "Design analytics dashboard layout",
    "body": "Design the layout and visualizations for the inbox analytics dashboard.",
    "assignees": ["EstebanMarquez"],
    "milestone": "5.3 Smart User Interactions",
    "labels": ["ui-design", "analytics", "visualization"]
  },
  {
    "title": "Design advanced search syntax",
    "body": "Design an intuitive yet powerful search syntax for filtering emails.",
    "assignees": ["RemiDubois"],
    "milestone": "5.3 Smart User Interactions",
    "labels": ["search", "ux", "design"]
  }
]